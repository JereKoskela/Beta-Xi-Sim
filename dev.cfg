# ================BLOCK DEPENDENT ON NUMBER OF ISLANDS ========================
# All parameters in this block must be vectors, denoted by round brackets
# surrounding the contents of the vector. Single-island  simulations can be
# run using vectors of length 1.

# The length of the sample sizes vector is taken to be the desired number of
# islands. If empty islands are desired, include corresponding zero entries.
# The sample_sizes vector must have non-negative integer entries only.
sample_sizes = (500);

# Relative population size at each island. Length must coincide with the length
# of sample_sizes, and entries must be > 0, sum to 1, and be in floating point
# format (e.g. 1.0 as opposed to 1).
relative_population_sizes = (1.0);

# Vector of maximum selective advantages at each island before rescaling.
# Length must coincide with length of sample_sizes, entries must be >= 0 and in
# floating point format (eg 0.0 as opposed to 0). Details of actual selective 
# advantage of given parental chromosomes are specified in the user-specified 
# functions section of ancestry.hh
selection_strengths = (0.0);

# The fraction of migrants leaving each island in each generation.
# Once rescaled, this corresponds to the migration rates away from islands.
# Details of the distribution of target islands of migrants are implemented
# in the user-specified functions section in ancestry.hh
# Entries must be >= 0 and in floating point format (eg 0.0 as opposed to 0).
migrant_fractions = (0.0);

# ================BLOCK DEPENDENT ON NUMBER OF LOCI ===========================
# All parameters in this block must be vectors, denoted by round brackets
# surrounding the contents of the vector. Single-locus  simulations can be
# run using vectors of length 1.

# Vector of desired lengths of unlinked loci in bases. Implicitly defines the 
# desired number of unlinked loci. Entries must be in floating point format 
# (eg 10.0 as opposed to 10).
locus_lengths = (28e6,24e6,29e6,35e6,24e6,25e6,31e6,27e6,25e6,25e6,29e6,27e6,26e6,29e6,27e6,31e6,19e6,23e6,21e6,24e6,23e6,22e6,23e6);

# Vector of desired lengths of selective windows at each locus in bases.
# Length must coincide with the length of locus_lengths, and entries must
# be in floating point format (eg 1.0 as opposed to 1).
selective_window_lengths = (8e5,8e5,8e5,8e5,8e5,8e5,8e5,8e5,8e5,8e5,8e5,8e5,8e5,8e5,8e5,8e5,8e5,8e5,8e5,8e5,8e5,8e5,8e5);

# Probability of a recombination somewhere along a locus in one generation
# The position of a recombination event given that one happens is implemented
# in the user-specified functions section of ancestor.hh. Entries must be
# in floating point format (eg 0.0 as opposed to 0).
recombination_probabilities = (0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0);

#======================SCALAR PARAMETERS=======================================
# Population growth rate per generation. Length must coincide with the length 
# of sample_sizes, entries must be in floating point format (eg 0.0 as opposed 
# to 0).
growth_rate = 0.0;

# Mutation probability per generation is assumed constant across all sites.
# Needs to be a floating point number (eg 1.0 as opposed to 1). Must be
# a floating point number strictly between 1.0 and 2.0.
per_site_mutation_probability = 1e-8;

# The parameter of the Beta(2 - alpha, alpha)-measure driving the Xi-coalescent
# Set to alpha = 2.0 for the Kingman coalescent. 
alpha = 1.0;

# Total effective population size across islands for scaling parameters.
# The population growth models assume the linear scaling of the Wright-Fisher
# model. The Xi-coalescents assume a Schweinsberg model with scaling 
# N^(alpha - 1). Must be in floating point format (eg 100.0 as opposed to 100).
effective_population_size = 500.0;
