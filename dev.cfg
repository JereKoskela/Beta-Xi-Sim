# ================BLOCK DEPENDENT ON NUMBER OF ISLANDS ========================
# The length of the sample sizes vector is taken to be the desired number of
# islands. If empty islands are desired, include corresponding zero entries
sample_sizes = (125,125,125,125);

# Relative population size at each island. Length must coincide with the length
# of sample_sizes, and entries must be > 0 and sum to 1.
relative_population_sizes = (0.25,0.25,0.25,0.25);

# Vector of maximum selective advantages at each island before rescaling.
# Length must coincide with length of sample_sizes, entries must be >= 0 and
# details of actual selective advantage of given parental chromosomes are
# specified in the user-specified functions section of ancestry.hh
selection_strengths = (0.0,0.0,0.0,0.0);

# The fraction of migrants leaving each island in each generation.
# Once rescaled, this corresponds to the migration rates away from islands.
# Details of the distribution of target islands of migrants are implemented
# in the user-specified functions section in ancestry.hh
# Entries must be >= 0.
migrant_fractions = (0.01,0.01,0.01,0.01);

# Population growth rate per generation at each island
# Ignored when model = 0
# Length must coincide with the length of sample_sizes
growth_rates = (0.05,0.05,0.05,0.05);

# ================BLOCK DEPENDENT ON NUMBER OF LOCI ===========================
# Vector of desired lengths of unlinked loci in bases.
# Implicitly defines the desired number of unlinked loci
locus_lengths = (28e6,24e6,29e6,35e6,24e6,25e6,31e6,27e6,25e6,25e6,29e6,27e6,26e6,29e6,27e6,31e6,19e6,23e6,21e6,24e6,23e6,22e6,23e6);

# Vector of desired lengths of selective windows at each locus in bases.
# Length must coincide with the length of locus_lengths!
selective_window_lengths = (8e5,8e5,8e5,8e5,8e5,8e5,8e5,8e5,8e5,8e5,8e5,8e5,8e5,8e5,8e5,8e5,8e5,8e5,8e5,8e5,8e5,8e5,8e5);

# Probability of a recombination somewhere along a locus in one generation
# The position of a recombination event given that one happens is implemented
# in the user-specified functions section of ancestor.hh.
recombination_probabilities = (0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0);

#======================SCALAR PARAMETERS=======================================
# Mutation probability per generation is assumed constant across all sites
per_site_mutation_probability = 1e-8;

# model 0 = Beta-Xi-coalescent
# model 1 = Kingman exponential population growth model
# model 2 = Kingman algebraic population growth model
# Exponential population growth rates and relative population sizes must 
# satisfy growth_rate_i / relative_population_size_i = constant across
# islands. Algebraic population growth rates and relative population sizes must
# both be homogeneous across islands.
model = 2;

# The parameter of the Beta(2 - alpha, alpha)-measure driving the Xi-coalescent
# Ignored (in fact set to alpha = 2 for convenience) when model != 0.
alpha = 1.999;

# Total effective population size across islands for scaling parameters.
# The population growth models assume the linear scaling of the Wright-Fisher
# model. The Xi-coalescents assume a Schweinsberg model with scaling 
# N^(alpha - 1).
effective_population_size = 500.0;