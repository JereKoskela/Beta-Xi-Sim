# =============================================================================
# All floating point numbers *must* be specified with a first decimal place,
# e.g. 1.0 as opposed to 1! Not doing this will cause silent errors!
# =============================================================================

# Sample size per island. Also implicitly determines the number of islands.
# Pad with zeros for unsampled islands.
sample_sizes = (250, 250);

# Time points (in numbers of generations) at which simulation parameters 
# change. Generations are converted to simulation time by the algorithm
# via 1 gen = N^(1 - alpha) units of time. Also implicitly determines
# the number of epochs as length + 1. 
# Use an empty vector () for a time-homogeneous simulation.
change_times = (200.0);

# Relative population size at each island per epoch. 
# Format: island_1_epoch_1, ..., island_n_epoch_1, island_1_epoch_2, ..., island_n_epoch_m.
# Entries must be > 0, and sum to 1 within epoch 1.
relative_population_sizes = (0.5, 0.5, 0.5, 0.5);

# Selection strength on each island per epoch. 
# Format: island_1_epoch_1, ..., island_n_epoch_1, island_1_epoch_2, ..., island_n_epoch_m.
# Entries must be >= 0.
# Details of these parameters should be specified in the fitness
# and max_fitness functions in ancestry.hh
selection_strengths = (0.0004, 0.0, 0.0004, 0.0);

# The fraction of migrants leaving each island in each generation per epoch.
# Once rescaled, this corresponds to the migration rates away from islands.
# Format: island_1_epoch_1, ..., island_n_epoch_1, island_1_epoch_2, ..., island_n_epoch_m.
# Entries must be >= 0, and all islands must be reachable from each other.
# Details of the distribution of the target island of a migrant are implemented
# in migration_probability in ancestry.hh.
migrant_fractions = (0.0, 0.0, 0.001, 0.001);

# The length of each neutral locus in sites, and the length of the amount of 
# material for selective mutations (in sites). These also implicitly define the
# number of loci.
locus_lengths = (28e6, 24e6);
selective_window_lengths = (8e5, 8e5);
#locus_lengths = (28e6,24e6,29e6,35e6,24e6,25e6,31e6,27e6,25e6,25e6,29e6,27e6,26e6,29e6,27e6,31e6,19e6,23e6,21e6,24e6,23e6,22e6,23e6);
#selective_window_lengths = (8e5,8e5,8e5,8e5,8e5,8e5,8e5,8e5,8e5,8e5,8e5,8e5,8e5,8e5,8e5,8e5,8e5,8e5,8e5,8e5,8e5,8e5,8e5);

# Probabilities of a recombination somewhere along a locus in one generation.
# Format: locus_1, ..., locus_n.
# The position of a recombination event given that one happens is implemented
# in sample_recombination_point in ancestor.hh.
recombination_probabilities = (0.0, 0.0);
#recombination_probabilities = (0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0);

# Population growth rate per generation per epoch. 
# Format: epoch_1, ..., epoch_m.
# Entries must be >= 0.
growth_rates = (0.0, 0.0);

# Mutation probability per generation.
# Overall mutation rate = per_site_probability * window_length * N^(alpha - 1).
per_site_mutation_probability = 1e-8;

# The parameter of the Beta(2 - alpha, alpha)-measure driving the Xi-coalescent
# Set to alpha = 2.0 for the Kingman coalescent. 
alpha = 2.0;

# Total effective population size across islands for scaling parameters as
# N^(alpha - 1).
effective_population_size = 500.0;
